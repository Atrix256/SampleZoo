function scandir(command)
    local i, t, popen = 0, {}, io.popen
    local pfile = popen(command)
    for filename in pfile:lines() do
        i = i + 1
        t[i] = filename
    end
    pfile:close()
    return t
end

print "=====Generating Code====="

local dotHHeader = "// Autogenerated by codegen.lua during premake process\n\n#pragma once\n\n"
local file

-- make ./src/samples/samples.h
file = io.open("./src/samples/samples.h", "w")
file:write(dotHHeader)
local sampleTypes = scandir('cd ./src/samples/ && ls -d ./*/ && cd ../..')
for k,v in pairs(sampleTypes) do
	local sampleType = string.sub(v,3,-2)
	file:write('#include "'..sampleType..'/'..sampleType..'.h"\n')
end
file:close()

-- make ./src/samples/X/X.h
for k,v in pairs(sampleTypes) do
	local sampleType = string.sub(v,3,-2)
	file = io.open("./src/samples/"..sampleType.."/"..sampleType..".h", "w")
	file:write(dotHHeader)
	local subSampleTypes = scandir('cd ./src/samples/'..sampleType..'/ && ls -d ./*/ && cd ../../..')
	for k2,v2 in pairs(subSampleTypes) do
		local subSampleType = string.sub(v2,3,-2)
		file:write('#include "'..subSampleType..'/'..subSampleType..'.h"\n')
        file:write('#include "'..subSampleType..'/autotest.h"\n')
	end
	file:close()
end

-- make ./src/tests/tests.h
file = io.open("./src/tests/tests.h", "w")
file:write(dotHHeader)
local testTypes = scandir('cd ./src/tests/ && ls -d ./*/ && cd ../..')
for k,v in pairs(testTypes) do
	local testType = string.sub(v,3,-2)
	file:write('#include "'..testType..'/'..testType..'.h"\n')
end
file:close()

-- make ./src/tests/X/X.h
for k,v in pairs(testTypes) do
	local testType = string.sub(v,3,-2)
	file = io.open("./src/tests/"..testType.."/"..testType..".h", "w")
	file:write(dotHHeader)
	local subTestTypes = scandir('cd ./src/tests/'..testType..'/ && ls -d ./*/ && cd ../../..')
	for k2,v2 in pairs(subTestTypes) do
		local subTestType = string.sub(v2,3,-2)
		file:write('#include "'..subTestType..'/'..subTestType..'.h"\n')
	end
	file:close()
end

-- make ./src/samples/X/Y/Y.h
for k,v in pairs(sampleTypes) do
    local sampleType = string.sub(v,3,-2)
    local subSampleTypes = scandir('cd ./src/samples/'..sampleType..'/ && ls -d ./*/ && cd ../../..')
    for k2,v2 in pairs(subSampleTypes) do

        local subSampleType = string.sub(v2,3,-2)

        file = io.open("./src/samples/"..sampleType.."/"..subSampleType.."/"..subSampleType..".h", "w")
        file:write(dotHHeader)
        file:write("#include <vector>\n\n")

        dofile("./src/samples/"..sampleType.."/"..subSampleType.."/info.lua")

        file:write("namespace Samples\n{\n    namespace "..sampleType.."\n    {\n        namespace "..info.CodeName.."\n        {\n")

        for functionIndex, functionName in ipairs(info.Functions) do
            file:write("            void "..functionName.."(std::vector<float>& values, size_t numValues);\n")
        end

        file:write("        };\n    };\n};\n")
    end
end

-- make ./src/samples/X/Y/autotest.h
for k,v in pairs(sampleTypes) do
    local sampleType = string.sub(v,3,-2)

    dofile("./src/samples/"..sampleType.."/samplefamily.lua")

    local subSampleTypes = scandir('cd ./src/samples/'..sampleType..'/ && ls -d ./*/ && cd ../../..')
    for k2,v2 in pairs(subSampleTypes) do

        local subSampleType = string.sub(v2,3,-2)

        file = io.open("./src/samples/"..sampleType.."/"..subSampleType.."/autotest.h", "w")
        file:write(dotHHeader)

        dofile("./src/samples/"..sampleType.."/"..subSampleType.."/info.lua")

        file:write("namespace Samples\n{\n    namespace "..sampleType.."\n    {\n        namespace "..info.CodeName.."\n        {\n")

        file:write("            inline void AutoTest(void)\n            {\n")

        local namespace = "Samples::"..sampleType.."::"..info.CodeName;

        MakeTests(file, info, "                ")

        file:write("            }\n")

        file:write("        };\n    };\n};\n")
    end
end